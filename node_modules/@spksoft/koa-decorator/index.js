"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Router = require("koa-router");
const fs = require("fs");
var HttpMethod;
(function (HttpMethod) {
    HttpMethod[HttpMethod["HEAD"] = 0] = "HEAD";
    HttpMethod[HttpMethod["OPTIONS"] = 1] = "OPTIONS";
    HttpMethod[HttpMethod["GET"] = 2] = "GET";
    HttpMethod[HttpMethod["PUT"] = 3] = "PUT";
    HttpMethod[HttpMethod["PATCH"] = 4] = "PATCH";
    HttpMethod[HttpMethod["POST"] = 5] = "POST";
    HttpMethod[HttpMethod["DELETE"] = 6] = "DELETE";
})(HttpMethod = exports.HttpMethod || (exports.HttpMethod = {}));
function getFiles(dir, files_) {
    files_ = files_ || [];
    const files = fs.readdirSync(dir);
    for (let i in files) {
        const name = dir + '/' + files[i];
        if (fs.statSync(name).isDirectory()) {
            getFiles(name, files_);
        }
        else {
            files_.push(name);
        }
    }
    return files_;
}
/**
 * 格式化返回数据的格式
 */
async function formatResponse(descriptor, ctx) {
    const ret = descriptor.value(ctx);
    if (ret != null) {
        const data = await Promise.resolve(ret);
        if (data != null) {
            // 正常格式
            ctx.body = {
                data: data,
            };
        }
    }
}
const router = new Router();
// @router 装饰器
function route(path, method, ...middleware) {
    return (target, key, descriptor) => {
        // Decorator applied to Class (for Constructor injection).
        if (typeof target === 'function' && key === undefined && descriptor === undefined) {
            if (!target.prototype.router) {
                target.prototype.router = new Router();
            }
            if (middleware.length > 0) {
                target.prototype.router.use(...middleware);
            }
            router.use(path, target.prototype.router.routes(), target.prototype.router.allowedMethods());
            return;
        }
        else if (typeof target === 'object') {
            if (!target.router) {
                target.router = new Router();
            }
            const handleReturnMiddleware = async function (ctx) {
                await formatResponse(descriptor, ctx);
            };
            // Decorator applied to member (method or property).
            switch (method) {
                case HttpMethod.HEAD:
                    target.router.head(path, ...middleware, handleReturnMiddleware);
                    break;
                case HttpMethod.OPTIONS:
                    target.router.options(path, ...middleware, handleReturnMiddleware);
                    break;
                case HttpMethod.GET:
                    target.router.get(path, ...middleware, handleReturnMiddleware);
                    break;
                case HttpMethod.PUT:
                    target.router.put(path, ...middleware, handleReturnMiddleware);
                    break;
                case HttpMethod.PATCH:
                    target.router.patch(path, ...middleware, handleReturnMiddleware);
                    break;
                case HttpMethod.POST:
                    target.router.post(path, ...middleware, handleReturnMiddleware);
                    break;
                case HttpMethod.DELETE:
                    target.router.del(path, ...middleware, handleReturnMiddleware);
                    break;
                default:
                    target.router.all(path, ...middleware, handleReturnMiddleware);
                    break;
            }
        }
    };
}
exports.route = route;
// 加载所有controller文件
function load(controllersDir, extension) {
    getFiles(controllersDir).forEach((file) => {
        if (file.endsWith(extension || '.js')) {
            require(file);
        }
    });
    return router;
}
exports.load = load;
